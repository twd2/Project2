Imports System.IO
Imports System.Text

Public Class LayoutInfo

    Public PathName As String
    Public WidthPoints As Integer

    Public Sub New(PathName As String, WidthPoints As Integer)
        Me.PathName = PathName
        Me.WidthPoints = WidthPoints
    End Sub

    ''' <summary>
    ''' 序列化一行
    ''' </summary>
    ''' <param name="rows">一行的数据</param>
    ''' <param name="indent">缩进</param>
    ''' <param name="k">像素系数</param>
    ''' <returns></returns>
    Public Shared Function SerializeRows(rows As List(Of RowInfo), indent As String, k As Integer) As String
        Dim sb As New StringBuilder
        sb.AppendLine(indent + "rows:")
        For Each row In rows
            sb.AppendLine(String.Format(indent + "  - frame: [{0}, {1}, {2}, {3}]", row.Keys(0).Rect.X \ k, row.Keys(0).Rect.Y \ k, (row.Keys.Last.Rect.Right - row.Keys(0).Rect.X + 1) \ k, row.Height \ k))
            sb.AppendLine(indent + "    keys:")
            For Each key In row.Keys
                sb.AppendLine(String.Format(indent + "      - frame: [{0}, {1}, {2}, {3}]", (key.Rect.X - row.Keys(0).Rect.X) \ k, 0, key.Rect.Width \ k, row.Height \ k))
            Next
        Next
        Return sb.ToString()
    End Function

    Private Function ProcessImage(fi As FileInfo) As KeyboardInfo
        Dim ext = fi.Extension.ToLower()
        If ext <> ".png" AndAlso ext <> ".jpg" Then
            Return Nothing
        End If

        Using img = Image.FromFile(fi.FullName)
            Dim ki = KeyboardInfo.FromImage(img)

            Dim rows = ki.ToRows()

#If DEBUG Then
            Dim myimg = img

            Using g = Graphics.FromImage(myimg)
                Dim font As New Font("Consolas", 30)

                g.DrawRectangle(Pens.Pink, ki.Range)

                g.TranslateTransform(ki.Range.Location.X, ki.Range.Location.Y)

                For Each blk In ki.KeyW
                    g.DrawRectangle(Pens.Red, blk.Rect)
                    g.DrawString("W", font, Brushes.Red, blk.Rect.Location)
                Next
                For Each blk In ki.KeyG
                    g.DrawRectangle(Pens.Green, blk.Rect)
                    g.DrawString("G", font, Brushes.Green, blk.Rect.Location)
                Next
                For Each blk In ki.KeyB
                    g.DrawRectangle(Pens.Blue, blk.Rect)
                    g.DrawString("B", font, Brushes.Blue, blk.Rect.Location)
                Next
                For Each blk In ki.KeyG2
                    g.DrawRectangle(Pens.Green, blk.Rect)
                    g.DrawString("G", font, Brushes.Green, blk.Rect.Location)
                Next

                g.ResetTransform()
            End Using

            ki.ImageData.ToBitmap().Save(Path.Combine("result", fi.Name + ".g.png"))
            myimg.Save(Path.Combine("result", fi.Name + ".png"))
#End If

            Return ki
        End Using
    End Function

    Public Sub [Do]()
        Console.WriteLine("entering {0}", PathName)
        Dim layouts As New Dictionary(Of String, Dictionary(Of String, List(Of RowInfo)))

        Dim widthkb = 0, heightkb = 0, k = 1
        widthkb = WidthPoints

        For Each filename In Directory.GetFiles(PathName)
            Dim fi As New FileInfo(filename)
            Dim type_cat = fi.Name.Split({"."c}, StringSplitOptions.None)(0).Split({"_"c}, StringSplitOptions.None)
            Dim type = type_cat(0), cat = type_cat(1)

            Console.Write("{0}...", fi.Name)
            Dim ki = ProcessImage(fi)
            Console.WriteLine("done.")

            If ki Is Nothing Then
                Continue For
            End If

            k = ki.Image.Width / WidthPoints
            heightkb = ki.Image.Height \ k

            Dim rows = ki.ToRows()

            If Not layouts.ContainsKey(type) Then
                layouts.Add(type, New Dictionary(Of String, List(Of RowInfo)))
            End If

            If Not layouts(type).ContainsKey(cat) Then
                layouts(type).Add(cat, rows)
            Else
                Debug.Assert(False)
            End If
        Next

        Dim sb As New StringBuilder()
        sb.AppendLine(String.Format("width: {0}", widthkb))
        sb.AppendLine(String.Format("height: {0}", heightkb))
        sb.AppendLine("layouts:")
        For Each type In layouts.Keys
            sb.AppendLine(String.Format("  {0}:", type))
            For Each cat In layouts(type).Keys
                If cat.IndexOf("#"c) >= 0 Then
                    sb.AppendLine(String.Format("    '{0}':", cat))
                Else
                    sb.AppendLine(String.Format("    {0}:", cat))
                End If
                sb.Append(SerializeRows(layouts(type)(cat), "      ", k))
            Next
        Next

        sb.AppendLine(String.Format("# Generated by WTFKeyboard written by twd2 at {0}.", Now))

        Console.Write("writing yaml...")
        File.WriteAllText(Path.Combine(PathName, String.Format("layout_{0}.yaml", WidthPoints)), sb.ToString())
        Console.WriteLine("done.")
    End Sub

End Class
